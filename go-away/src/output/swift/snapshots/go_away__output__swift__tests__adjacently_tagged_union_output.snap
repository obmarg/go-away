---
source: go-away/src/output/swift/tests.rs
expression: "SwiftType::Union(&types::Union {\n                name: \"MyUnion\".into(),\n                representation: UnionRepresentation::AdjacentlyTagged {\n                    tag: \"type\".into(),\n                    content: \"data\".into(),\n                },\n                variants: vec![UnionVariant\n                    {\n                        name : Some(\"VarOne\".into()), ty : FieldType ::\n                        Named(TypeRef { name : \"VarOne\".into() }), serialized_name :\n                        \"VAR_ONE\".into(),\n                    }, UnionVariant\n                    {\n                        name : Some(\"VarTwo\".into()), ty : FieldType ::\n                        Named(TypeRef { name : \"VarTwo\".into() }), serialized_name :\n                        \"VAR_TWO\".into(),\n                    }],\n            }).to_string()"
---
public enum MyUnion {
    case varOne(VarOne)
    case varTwo(VarTwo)
    enum CodingKeys: String, CodingKey {
        case varOne = "VAR_ONE"
        case varTwo = "VAR_TWO"
    }
}

extension MyUnion: Decodable {
    init(from decoder: Decoder) throws {
        enum ContainerKeys: String, CodingKey {
            case tag = "type"
            case data = "data"
        }
        let container = try decoder.container(ContainerKeys.self)
        let key = try decoder.decode(MyUnion.CodingKeys.self, forKey: .tag)
        switch key {
            case .varOne:
                return try container.decode(VarOne.self, forKey: .data)
            }
            case .varTwo:
                return try container.decode(VarTwo.self, forKey: .data)
            }
            default:
                throw "Unknown variant"
        }

    }
}

extension MyUnion: Encodable {
    func encode(to encoder: Encoder) throws {
        enum ContainerKeys: String, CodingKey {
            case tag = "type"
            case data = "data
        }
        let container = try encoder.container(ContainerKeys.self)
        switch this {
            case .varOne(data):
                try container.encode(MyUnion.CodingKeys.name, forKey: .tag)
                try container.encode(data, forKey: .data)
            }
            case .varTwo(data):
                try container.encode(MyUnion.CodingKeys.name, forKey: .tag)
                try container.encode(data, forKey: .data)
            }
        }

    }
}



