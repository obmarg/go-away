---
source: go-away/tests/swift_output.rs
expression: "go_away::registry_to_output::<go_away::SwiftType>(&registry)"
---
public struct Two: Hashable, Codable {
    public var y: Bool

    public init(
        y: Bool,
    ) {
        self.y = y
    }
}

extension Two {
    enum CodingKeys: String, CodingKey {
        case y = "y"
    }
}

public struct One: Hashable, Codable {
    public var x: Double

    public init(
        x: Double,
    ) {
        self.x = x
    }
}

extension One {
    enum CodingKeys: String, CodingKey {
        case x = "x"
    }
}

public enum NewTypeEnum {
    case optionOne(One)
    case optionTwo(Two)
    enum CodingKeys: String, CodingKey {
        case optionOne = "OptionOne"
        case optionTwo = "OptionTwo"
    }
}

extension NewTypeEnum: Decodable {
    init(from decoder: Decoder) throws {
        let container = try decoder.container(NewTypeEnum.CodingKeys.self)
        if (container.contains(.optionOne)) {
            return try container.decode(One.self, forKey: .optionOne)
        }
        if (container.contains(.optionTwo)) {
            return try container.decode(Two.self, forKey: .optionTwo)
        }

    }
}

extension NewTypeEnum: Encodable {
    func encode(to encoder: Encoder) throws {
        let container = try encoder.container(NewTypeEnum.CodingKeys.self)
        switch self {
            case .optionOne(data):
                return container.encode(data, forKey: .optionOne)
            case .optionTwo(data):
                return container.encode(data, forKey: .optionTwo)
        }
    }
}



