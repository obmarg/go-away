---
source: go-away/tests/output.rs
expression: "go_away::registry_to_output(registry)"

---
type Two struct {
	Y bool `json:"y"`
}
type One struct {
	X float64 `json:"x"`
}
type InternallyTaggedTupleEnum struct {
	One *One
	Two *Two
}

func (self InternallyTaggedTupleEnum) MarshalJSON() ([]byte, error) {
	if err := self.Validate(); err != nil {
		return nil, fmt.Errorf("Validate Failed: %w", err)
	}
	if self.One != nil {
		return json.Marshal(struct{
			Tag string `json:"type"`
			One
		}{
			Tag: "One",
			One: *self.One,
		})
	} else 	if self.Two != nil {
		return json.Marshal(struct{
			Tag string `json:"type"`
			Two
		}{
			Tag: "Two",
			Two: *self.Two,
		})
	} else 	{
		return nil, fmt.Errorf("No variant was present")
	}
}
func (self *InternallyTaggedTupleEnum) UnmarshalJSON(data []byte) error {
	temp := struct{
		Tag string `json:"type"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	if temp.Tag == "One" {
		var rv One
		if err := json.Unmarshal(data, &rv); err != nil {
			return err
		}
		self.One = &rv
		self.Two = nil
	} else if temp.Tag == "Two" {
		var rv Two
		if err := json.Unmarshal(data, &rv); err != nil {
			return err
		}
		self.Two = &rv
		self.One = nil
	} else {
		return errors.New("Unknown type tag")
	}
	return nil
}
func (u InternallyTaggedTupleEnum) Validate() error {
	var count int

	if u.One != nil {
		count++
	}

	if u.Two != nil {
		count++
	}

	if count != 1 {
		return fmt.Errorf("one variant must be populated, found %d", count)
	}

	return nil
}

