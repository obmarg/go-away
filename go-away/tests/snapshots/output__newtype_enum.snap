---
source: go-away/tests/output.rs
expression: "go_away::registry_to_output(registry)"

---
type NewTypeEnum struct {
	OptionOne *One
	OptionTwo *Two
}

func (self *NewTypeEnum) MarshalJSON() ([]byte, error) {
	if self.OptionOne != nil {
		var output map[string]interface{}
		output["type"] = "OptionOne"
		output["data"] = self.OptionOne
		return json.Marshal(output)
	} else 	if self.OptionTwo != nil {
		var output map[string]interface{}
		output["type"] = "OptionTwo"
		output["data"] = self.OptionTwo
		return json.Marshal(output)
	} else 	{
		return json.Marshal(nil)
	}
}
func (self *NewTypeEnum) UnmarshalJSON(data []byte) error {
	temp := struct{
		Tag string `json:"type"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	if temp.Tag == "OptionOne" {
		rv := struct{
			Data One `json:"data"`
		}{}
		if err := json.Unmarshal(data, &rv); err != nil {
			return err
		}
		self.OptionOne = &rv.Data
		self.OptionTwo = nil
	} else if temp.Tag == "OptionTwo" {
		rv := struct{
			Data Two `json:"data"`
		}{}
		if err := json.Unmarshal(data, &rv); err != nil {
			return err
		}
		self.OptionTwo = &rv.Data
		self.OptionOne = nil
	} else {
		return errors.New("Unknown type tag")
	}
	return nil
}
type Two bool
type One float64

