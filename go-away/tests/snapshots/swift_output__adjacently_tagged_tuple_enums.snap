---
source: go-away/tests/swift_output.rs
expression: "go_away::registry_to_output::<go_away::SwiftType>(&registry)"
---
public struct Two: Hashable, Codable {
    public var y: Bool

    public init(
        y: Bool) {
        self.y = y
    }
}

extension Two {
    enum CodingKeys: String, CodingKey, Codable {
        case y = "y"
    }
}

public struct One: Hashable, Codable {
    public var x: Double

    public init(
        x: Double) {
        self.x = x
    }
}

extension One {
    enum CodingKeys: String, CodingKey, Codable {
        case x = "x"
    }
}

public enum AdjacentlyTaggedTupleEnums {
    case optionOne(One)
    case optionTwo(Two)
    enum CodingKeys: String, CodingKey, Codable {
        case optionOne = "OptionOne"
        case optionTwo = "OptionTwo"
    }
}

extension AdjacentlyTaggedTupleEnums: Decodable {
    public init(from decoder: Decoder) throws {
        enum ContainerKeys: String, CodingKey {
            case tag = "type"
            case data = "data"
        }
        let container = try decoder.container(keyedBy: ContainerKeys.self)
        let key = try container.decode(AdjacentlyTaggedTupleEnums.CodingKeys.self, forKey: .tag)
        switch key {
            case .optionOne:
                self = .optionOne(try container.decode(One.self, forKey: .data))
            case .optionTwo:
                self = .optionTwo(try container.decode(Two.self, forKey: .data))
        }

    }
}

extension AdjacentlyTaggedTupleEnums: Encodable {
    public func encode(to encoder: Encoder) throws {
        enum ContainerKeys: String, CodingKey {
            case tag = "type"
            case data = "data"
        }
        var container = encoder.container(keyedBy: ContainerKeys.self)
        switch self {
            case .optionOne(let data):
                try container.encode(AdjacentlyTaggedTupleEnums.CodingKeys.optionOne, forKey: .tag)
                try container.encode(data, forKey: .data)
            case .optionTwo(let data):
                try container.encode(AdjacentlyTaggedTupleEnums.CodingKeys.optionTwo, forKey: .tag)
                try container.encode(data, forKey: .data)
        }

    }
}



